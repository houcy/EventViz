{"name":"Eventviz","tagline":"A web application to display events in a timeline","body":"A web application to display log (or whatever parsable source) events in a timeline. It has a Flask based interface\r\nand uses MongoDB for storage.\r\n\r\nThis application is not meant to be used as a log management tool, but more as an easy way to visualize and\r\nmake searches on a pre-filtered set of events.\r\n\r\n## Screenshots\r\n\r\n### Main View\r\n\r\n![Main View](http://img845.imageshack.us/img845/7219/o0au.png \"Main View\")\r\n\r\n### Timeline View\r\n\r\n![Timeline View](http://img22.imageshack.us/img22/5413/akxz.png \"Timeline View\")\r\n\r\n### Timeline Event Details\r\n\r\n![Timeline Event Details](http://img560.imageshack.us/img560/2237/g7gp.png \"Timeline Event Details\")\r\n\r\n### Search View\r\n\r\n![Search View](http://img713.imageshack.us/img713/6708/qtl4.png \"Search View\")\r\n\r\n## Features\r\n\r\n* Group events per project\r\n* Timeline visualization\r\n  * Browsable, zoomable\r\n  * Display any field(s)\r\n  * Group by any field\r\n  * Double-click an event to see all its fields\r\n* Events search\r\n  * String matching\r\n  * Substring matching\r\n  * Regular expression matching\r\n\r\n## Requirements\r\n\r\n* Software\r\n  * Python 2.x\r\n  * MongoDB\r\n* Python libraries\r\n  * PyMongo\r\n  * Flask\r\n  * Flask-Script\r\n  * Flask-Assets\r\n  * YUIcompressor\r\n\r\nRequired Python libraries can be installed using the provided `requirements.txt`.\r\n\r\n    pip install -r requirements.txt\r\n\r\n## Usage\r\n\r\nAll the administration commands are implemented in the `manage.py` script. Commands switches meaning can\r\nbe viewed using `./manage.py <command> -h`, and available commands can be listed by calling the script\r\nwithout any argument.\r\n\r\n### Configuration\r\n\r\nDefault configuration variables are stored in the `settings.py` file. To prevent making changes to a versioned file,\r\nyou should create a `prod_settings.py` file where you'd override the options you want, it will be automatically loaded.\r\n\r\nHere are the options **you really should change**:\r\n\r\n* `DEBUG`: Displays `Werkzeug` integrated debugger when an exception is raised. Gives access to a Python shell\r\nin the application's context. You really don't want that in a production environment!\r\n* `SECRET_KEY`: The key used to sign cookies. Set this to a very long random value.\r\n\r\nFor the remaining configuration variables, just look at the `settings.py` file, it should be self-explanatory.\r\n\r\n### Workflow\r\n\r\n* Load some data using the `./manage.py load_data` command\r\n* Run the integrated server using the `./manage.py runserver` command\r\n* Connect to http://127.0.0.1:5000 with your web browser\r\n\r\nOnce you've selected a project, two sections will become available, 'timeline' where you can navigate through events (you can\r\nsee an event's details by double-clicking it), and 'search' where your search results are displayed in a sortable grid.\r\n\r\n### Deployment\r\n\r\nTo serve the application using something else than the integrated server (Apache, nginx, ...), please refer to\r\nthe related [Flask documentation](http://flask.pocoo.org/docs/deploying/).\r\n\r\n## Documentation\r\n\r\n\r\nSee the [Wiki](https://github.com/mattoufoutu/EventViz/wiki)\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}